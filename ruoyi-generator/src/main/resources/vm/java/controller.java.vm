package ${packageName}.controller;

import com.github.pagehelper.PageInfo;
import com.ruoyi.common.annotation.Log;
import com.ruoyi.common.core.controller.BaseController;
import com.ruoyi.common.core.domain.R;
import com.ruoyi.common.enums.BusinessType;
import com.ruoyi.common.utils.poi.ExcelUtil;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import ${packageName}.domain.dto.form.${ClassName}Form;
import ${packageName}.domain.po.${ClassName};
import ${packageName}.service.I${ClassName}Service;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import java.util.Arrays;
import java.util.List;

/**
 * ${functionName}控制层
 * 
 * @author ${author}
 */
@Api(tags = "${functionName}接口")
@RestController
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller extends BaseController {

    @Autowired
    private I${ClassName}Service ${className}Service;

    @ApiOperation(value = "查询${functionName}详细信息")
    @PostMapping(value = "/getInfo")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:query')")
    public R<${ClassName}> getInfo(@RequestBody ${pkColumn.javaType} ${pkColumn.javaField}) {
        return R.ok(${className}Service.getInfo(${pkColumn.javaField}));
    }

    @ApiOperation(value = "查询${functionName}列表")
    @PostMapping("/list")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:list')")
    public R<PageInfo<${ClassName}>> list(@Valid @RequestBody ${ClassName}Form req) {
        startPage(req);
        return R.ok(getPageInfo(${className}Service.customList(req)));
    }

    @ApiOperation(value = "新增${functionName}")
    @Log(title = "${functionName}", businessType = BusinessType.INSERT)
    @PostMapping("/add")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:add')")
    public R<${ClassName}> add(@Valid @RequestBody ${ClassName} req) {
        return R.ok(${className}Service.customInsert(req));
    }

    @ApiOperation(value = "修改${functionName}")
    @Log(title = "${functionName}", businessType = BusinessType.UPDATE)
    @PostMapping("/edit")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:edit')")
    public R<${ClassName}> edit(@Valid @RequestBody ${ClassName} req) {
        return R.ok(${className}Service.customUpdate(req));
    }

    @ApiOperation(value = "批量删除${functionName}")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
    @PostMapping("/remove")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:remove')")
    public R<Boolean> remove(@RequestBody String[] ids) {
        return R.ok(${className}Service.customRemoveByIds(Arrays.asList(ids)));
    }

    @ApiOperation(value = "导出${functionName}")
    @Log(title = "${functionName}", businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:export')")
    public void export(HttpServletResponse response, @RequestBody ${ClassName}Form req) {
        startPage(req);
        List<${ClassName}> list = ${className}Service.customList(req);
        ExcelUtil<${ClassName}> util = new ExcelUtil<>(${ClassName}.class);
        util.exportExcel(response, list, "${functionName}");
    }

    @ApiOperation("导入${functionName}")
    @Log(title = "${functionName}", businessType = BusinessType.IMPORT)
    @PostMapping("/importExcel")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:import')")
    public R<Void> importExcel(@RequestParam MultipartFile file) {
        ExcelUtil<${ClassName}> excelUtil = new ExcelUtil<>(${ClassName}.class);
        List<${ClassName}> list;
        try {
            list = excelUtil.importExcel(file.getInputStream());
            list.forEach(e-> {
                ${className}Service.customInsert(e);
            });
        } catch (Exception e) {
            return R.fail("导入失败");
        }
        return R.ok();
    }

}
